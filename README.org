#+AUTHOR: Wasym A. Alonso
#+TITLE: WGE: Wildebeest Game Engineâ„¢

#+CAPTION: WGE logo
[[assets/logo.png]]

# Buy Me A Coffee
#+begin_html
<p align="center">
<a href="https://www.buymeacoffee.com/wildebeest.game.engine"><img src="https://cdn.buymeacoffee.com/buttons/default-yellow.png" alt="Buy Me A Coffee" height=41 width=174></a>
</p>
#+end_html

# Repository badges
#+begin_html
<p align="center">
<a href="https://www.gnu.org/licenses/gpl-3.0.html"><img src="https://img.shields.io/badge/License-GPLv3-blue.svg" alt="GNU GPL v3.0"></a>
<a href="https://www.codefactor.io/repository/github/iwas-coder/wge"><img src="https://www.codefactor.io/repository/github/iwas-coder/wge/badge" alt="Code QA"></a>
</p>
#+end_html
#+begin_html
<p align="center">
<a href="https://github.com/iWas-Coder/wge/actions/workflows/build-test.yaml"><img src="https://github.com/iWas-Coder/wge/actions/workflows/build-test.yaml/badge.svg" alt="WGE CI: Build & Test"></a>
<a href="https://github.com/iWas-Coder/wge/actions/workflows/wge-builder.yaml"><img src="https://github.com/iWas-Coder/wge/actions/workflows/wge-builder.yaml/badge.svg" alt="WGE CI: Build & Push image that builds WGE"></a>
<a href="https://github.com/iWas-Coder/wge/actions/workflows/wge-cli-builder.yaml"><img src="https://github.com/iWas-Coder/wge/actions/workflows/wge-cli-builder.yaml/badge.svg" alt="WGE CI: Build & Push image that builds WGE"></a>
</p>
#+end_html

(...)

#+BEGIN_QUOTE
This work and all its documentation is licensed under the Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) License. @@html:<br>@@
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. @@html:<br>@@
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#+END_QUOTE

* Table of Contents :toc:
- [[#preliminary-aspects][Preliminary aspects]]
  - [[#platform-support][Platform support]]
  - [[#tech-stack][Tech stack]]
  - [[#project-structure][Project structure]]
  - [[#features][Features]]
    - [[#high-level-product-features][High-level product features]]
    - [[#feature-roadmap][Feature roadmap]]
      - [[#general][General]]
      - [[#renderer][Renderer]]
      - [[#ui][UI]]
      - [[#miscellany][Miscellany]]
  - [[#engine-architecture][Engine architecture]]
  - [[#renderer-1][Renderer]]
    - [[#architecture][Architecture]]
    - [[#lifecycle][Lifecycle]]
    - [[#phases][Phases]]
    - [[#graphics-pipeline][Graphics pipeline]]
    - [[#shader-modules][Shader modules]]
- [[#build][Build]]
- [[#usage][Usage]]

* Preliminary aspects

** Platform support

Linux and Windows.

** Tech stack

- *Language:* C (*gnu17* - *ISO C 2017* [ ~ISO/IEC 9899:2018~ ] with *GNU extensions*)
- *Compiler:* GCC / Clang / MinGW-w64-GCC
- *Graphics API:* Vulkan

** Project structure

#+begin_src mermaid
mindmap
  root(("Engine (shared)"))
    ("Hot-reloadable code (shared)")
      ("Game (exec)")
    ("Test (exec)")
    ("Editor (exec)")
#+end_src

** Features

*** High-level product features

- Lightweight build system (GNU Make)
- Low-level utilities (dynamic arrays, string handling, etc.)
- Platform layer (OS-based abstractions for windowing, input, console interaction, etc.)
- Logger (debugging purposes)
- File I/O capabilities
- Application layer
- Renderer and API abstraction layer
- Memory management (custom allocators, etc.)
- Entity Component System (ECS)
- Profiling and debugging utilities
- Scripts support via hot-realoadable modules
- Physics system

*** Feature roadmap

**** General

- [X] Platform layer
- [X] Desktop GNU/Linux support
- [ ] Desktop Windows support
- [ ] Desktop macOS support
- [ ] Mobile Android support (runtime)
- [ ] Mobile iOS support (runtime)
- [X] Dynamic array
- [ ] Free list
- [X] Hash table
- [ ] Stack
- [ ] Queue
- [ ] Ring
- [ ] Pool
- [ ] Binary Search Tree (BST)
- [X] Logger (basic)
- [ ] Multithreaded logging
- [ ] Logger channel grouping
- [X] Clock (basic)
- [ ] Clock (advanced)
- [X] Events (basic)
- [ ] Event broadcast
- [ ] Event polling
- [ ] Multithreaded events
- [X] Keyboard support
- [ ] Mouse support
- [ ] Gamepad support
- [ ] Touchscreen/mobile support
- [X] String library (basic)
- [ ] String library (struct based)
- [X] Math library
- [ ] SIMD support for math library
- [X] Linear allocator
- [ ] Dynamic allocator
- [ ] Pool allocator
- [ ] System manager & interface
- [ ] Multithreading
- [ ] Job system
- [X] Resource system
  - [X] Binary resource loader
  - [X] Text resource loader
  - [X] Image resource loader
  - [X] Material resource loader
  - [ ] Bitmap font resource loader
  - [ ] System font resource loader
  - [ ] Scene resource loader
- [ ] Texture format (binary)
- [ ] Texture format conversion tool
- [ ] Resource hot-reloading
- [ ] Entity Component System (ECS)
- [ ] Scenes
  - [ ] Scene format
  - [ ] Scene load/save procedures
- [ ] Prefabs
- [ ] Raycasting
- [ ] Object picking
- [ ] Gizmos
- [ ] Editor (world)
- [ ] Audio
- [ ] Physics
- [ ] Networking
- [ ] Profiling
- [ ] Game/editor logic hot-reloading
- [ ] Keymaps/keybindings
- [ ] Configurable global settings
- [ ] Configurable engine settings
- [ ] Timeline system
- [ ] Skeletal animation system
- [ ] Terrain
- [ ] Skybox & skysphere

**** Renderer

- [X] Renderer front/backend architecture
- [X] Vulkan API backend support
- [ ] OpenGL API backend support
- [ ] Direct3D API backend support
- [ ] Metal API backend support
- [X] Textures
- [X] Geometry
- [X] Materials (basic)
- [ ] Materials (advanced)
- [X] Render targets/textures support
- [ ] 2D/3D geometry generation
- [X] Multiple renderpass support
- [ ] Configurable renderpasses
- [ ] Phong reflection/lighting model
- [ ] Specular maps
- [ ] Normal maps
- [ ] Physically Based Rendering (PBR)
- [ ] Multithreading support for Vulkan renderer
- [ ] Multithreading support for D3D12 renderer
- [ ] 2D/3D batch rendering

**** UI

- [ ] UI system
- [ ] Layering
- [ ] UI file format
- [ ] Load/save procedures
- [ ] Editor (UI)
- [ ] Control focus (TAB-ing)
- [ ] Docking
- [ ] Drag-and-Drop support
- [ ] UI controls
  - [ ] Base (show/hide, position)
  - [ ] Panel
  - [ ] Image box
  - [ ] Viewport
  - [ ] Text (basic)
  - [ ] Text (rich)
  - [ ] Button
  - [ ] Checkbox
  - [ ] Radio button
  - [ ] Tab
  - [ ] Window/modal
  - [ ] Resizable multi-panel
  - [ ] Scrollbar
  - [ ] Scroll container
  - [ ] Textbox/textarea

**** Miscellany

- [X] README-type documentation
- [ ] White paper
- [ ] Reference Manual
  - [ ] Info
  - [ ] HTML
  - [ ] PostScript
  - [ ] gzipped PostScript
  - [ ] PDF
- [ ] API auto-generated code documentation
  - [ ] Man
  - [ ] HTML
  - [ ] PostScript
  - [ ] gzipped PostScript
  - [ ] PDF

** Engine architecture

#+CAPTION: Engine architecture diagram
[[assets/engine-arch-diagram.png]]

** Renderer

(...)

*** Architecture

(...)

*** Lifecycle

(...)

*** Phases

(...)

*** Graphics pipeline

(...)

*** Shader modules

(...)

* Build

(...)

#+begin_src sh
$  git clone https://github.com/iWas-Coder/wge --recurse-submodules
#+end_src
(...)
#+begin_src sh
$  git clone https://github.com/iWas-Coder/wge && cd wge
$  git submodule init
$  git submodule update
#+end_src

WGE ships with a ready-to-go ~Makefile~, so *GNU Make* is needed in order to build the engine. It is as simple as doing:
#+begin_src sh
$  make
#+end_src
By default, it targets the *Linux platform* (e.g. /GNU/Linux/). In order to build the project for Windows, it will be needed the *MinGW-w64* compiler suite in order to cross-compile it. With all that setup, it can be specified by doing:
#+begin_src sh
$  make TARGET=windows
#+end_src

* Usage

(...)
