#+AUTHOR: Wasym A. Alonso
#+TITLE: WGE: Wildebeest Game Engine™

#+CAPTION: WGE logo
[[assets/logo.png]]

# Buy Me A Coffee
#+begin_html
<p align="center">
<a href="https://www.buymeacoffee.com/wildebeest.game.engine"><img src="https://cdn.buymeacoffee.com/buttons/default-yellow.png" alt="Buy Me A Coffee" height=41 width=174></a>
</p>
#+end_html

# Repository info badges
#+begin_html
<p align="center">
<a href="https://www.gnu.org/licenses/gpl-3.0.html"><img src="https://img.shields.io/badge/License-GPLv3-blue.svg" alt="GNU GPL v3.0"></a>
<a href="https://www.codefactor.io/repository/github/iwas-coder/wge"><img src="https://www.codefactor.io/repository/github/iwas-coder/wge/badge" alt="Code QA"></a>
<a href=""><img src="https://tokei.rs/b1/github/iwas-coder/wge?category=code" alt="LoC">
<a href=""><img src="https://tokei.rs/b1/github/iwas-coder/wge?category=files" alt="Files">
</p>
#+end_html

# Repository workflow badges
#+begin_html
<p align="center">
<a href="https://github.com/iWas-Coder/wge/actions/workflows/build-test.yaml"><img src="https://github.com/iWas-Coder/wge/actions/workflows/build-test.yaml/badge.svg" alt="WGE CI: Build & Test"></a>
<a href="https://github.com/iWas-Coder/wge/actions/workflows/wge-builder.yaml"><img src="https://github.com/iWas-Coder/wge/actions/workflows/wge-builder.yaml/badge.svg" alt="WGE CI: Build & Push image that builds WGE"></a>
<a href="https://github.com/iWas-Coder/wge/actions/workflows/wge-cli-builder.yaml"><img src="https://github.com/iWas-Coder/wge/actions/workflows/wge-cli-builder.yaml/badge.svg" alt="WGE CI: Build & Push image that builds WGE"></a>
</p>
#+end_html

(...)

# GNU GPLv3+ License notice
#+BEGIN_QUOTE
This work and all its documentation is licensed under the Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) License. @@html:<br>@@
This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. @@html:<br>@@
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#+END_QUOTE

* Table of Contents :toc:
- [[#preliminary-aspects][Preliminary aspects]]
  - [[#platform-support][Platform support]]
  - [[#tech-stack][Tech stack]]
  - [[#project-structure][Project structure]]
  - [[#features][Features]]
    - [[#high-level-product-features][High-level product features]]
    - [[#feature-roadmap][Feature roadmap]]
      - [[#general][General]]
      - [[#renderer][Renderer]]
      - [[#ui][UI]]
      - [[#miscellany][Miscellany]]
  - [[#architecture][Architecture]]
  - [[#renderer-1][Renderer]]
    - [[#architecture-1][Architecture]]
    - [[#lifecycle][Lifecycle]]
    - [[#phases][Phases]]
    - [[#graphics-pipeline][Graphics pipeline]]
      - [[#shader-modules][Shader modules]]
      - [[#vertex-shader][Vertex shader]]
      - [[#fragment-shader][Fragment shader]]
- [[#install-a-release][Install a release]]
  - [[#archive-targz--zip][Archive (~.tar.gz~ || ~.zip~)]]
  - [[#appimage][AppImage]]
  - [[#flatpak][Flatpak]]
  - [[#snap][Snap]]
- [[#build-from-source][Build from source]]
  - [[#get-the-code][Get the code]]
  - [[#build][Build]]
- [[#usage][Usage]]

* Preliminary aspects

** Platform support

Linux and Windows.

** Tech stack

- *Language:* C (*gnu17* - *ISO C 2017* [ ~ISO/IEC 9899:2018~ ] with *GNU extensions*)
- *Compiler:* GCC / Clang / MinGW-w64-GCC
- *Graphics API:* Vulkan

** Project structure

#+begin_src mermaid
mindmap
  root(("Engine (shared)"))
    ("Hot-reloadable code (shared)")
      ("Game (exec)")
    ("Test (exec)")
    ("Editor (exec)")
#+end_src

** Features

*** High-level product features

- Lightweight build system (GNU Make)
- Low-level utilities (dynamic arrays, string handling, etc.)
- Platform layer (OS-based abstractions for windowing, input, console interaction, etc.)
- Logger (debugging purposes)
- File I/O capabilities
- Application layer
- Renderer and API abstraction layer
- Memory management (custom allocators, etc.)
- Entity Component System (ECS)
- Profiling and debugging utilities
- Scripts support via hot-realoadable modules
- Physics system

*** Feature roadmap

**** General

| Feature                          | Status | Feature                       | Status | Feature                         | Status |
|----------------------------------+--------+-------------------------------+--------+---------------------------------+--------|
| Platform layer                   | ✅     | Keyboard support              | ✅     | Texture format conversion tool  | ❌     |
| Desktop GNU/Linux support        | ✅     | Mouse support                 | ❌     | Resource hot-reloading          | ❌     |
| Desktop Windows support          | ❌     | Gamepad support               | ❌     | Entity Component System (ECS)   | ❌     |
| Desktop macOS support            | ❌     | Touchscreen/mobile support    | ❌     | Scenes                          | ❌     |
| Mobile Android support (runtime) | ❌     | String library (basic)        | ✅     | Scene format                    | ❌     |
| Mobile iOS support (runtime)     | ❌     | String library (struct based) | ❌     | Scene load/save procedures      | ❌     |
| Dynamic array                    | ✅     | Math library                  | ✅     | Prefabs                         | ❌     |
| Free list                        | ❌     | SIMD support for math library | ❌     | Raycasting                      | ❌     |
| Hash table                       | ✅     | Linear allocator              | ✅     | Object picking                  | ❌     |
| Stack                            | ❌     | Dynamic allocator             | ❌     | Gizmos                          | ❌     |
| Queue                            | ❌     | Pool allocator                | ❌     | Editor (world)                  | ❌     |
| Ring                             | ❌     | System manager & interface    | ❌     | Audio                           | ❌     |
| Pool                             | ❌     | Multithreading                | ❌     | Physics                         | ❌     |
| Binary Search Tree (BST)         | ❌     | Job system                    | ❌     | Networking                      | ❌     |
| Logger (basic)                   | ✅     | Resource system               | ✅     | Profiling                       | ❌     |
| Multithreaded logging            | ❌     | Binary resource loader        | ✅     | Game/editor logic hot-reloading | ❌     |
| Logger channel grouping          | ❌     | Text resource loader          | ✅     | Keymaps/keybindings             | ❌     |
| Clock (basic)                    | ✅     | Image resource loader         | ✅     | Configurable global settings    | ❌     |
| Clock (advanced)                 | ❌     | Material resource loader      | ✅     | Configurable engine settings    | ❌     |
| Events (basic)                   | ✅     | Bitmap font resource loader   | ❌     | Timeline system                 | ❌     |
| Event broadcast                  | ❌     | System font resource loader   | ❌     | Skeletal animation system       | ❌     |
| Event polling                    | ❌     | Scene resource loader         | ❌     | Terrain                         | ❌     |
| Multithreaded events             | ❌     | Texture format (binary)       | ❌     | Skybox & skysphere              | ❌     |

**** Renderer

| Feature                             | Status | Feature                                    | Status |
|-------------------------------------+--------+--------------------------------------------+--------|
| Renderer front/backend architecture | ✅     | 2D/3D geometry generation                  | ❌     |
| Vulkan API backend support          | ✅     | Multiple renderpass support                | ✅     |
| OpenGL API backend support          | ❌     | Configurable renderpasses                  | ❌     |
| Direct3D API backend support        | ❌     | Phong reflection/lighting model            | ❌     |
| Metal API backend support           | ❌     | Specular maps                              | ❌     |
| Textures                            | ✅     | Normal maps                                | ❌     |
| Geometry                            | ✅     | Physically Based Rendering (PBR)           | ❌     |
| Materials (basic)                   | ✅     | Multithreading support for Vulkan renderer | ❌     |
| Materials (advanced)                | ❌     | Multithreading support for D3D12 renderer  | ❌     |
| Render targets/textures support     | ✅     | 2D/3D batch rendering                      | ❌     |

**** UI

| Feature                            | Status | Feature                       | Status |
|------------------------------------+--------+-------------------------------+--------|
| UI system                          | ❌     | Text (basic) control          | ❌     |
| Layering                           | ❌     | Text (rich) control           | ❌     |
| UI file format                     | ❌     | Button control                | ❌     |
| Load/save procedures               | ❌     | Checkbox control              | ❌     |
| Editor (UI)                        | ❌     | Radio button control          | ❌     |
| Control focus (TAB-ing)            | ❌     | Tab control                   | ❌     |
| Docking                            | ❌     | Window/modal control          | ❌     |
| Drag-and-Drop support              | ❌     | Resizable multi-panel control | ❌     |
| Base control (show/hide, position) | ❌     | Scrollbar control             | ❌     |
| Panel control                      | ❌     | Scroll container control      | ❌     |
| Image box control                  | ❌     | Textbox/textarea control      | ❌     |
| Viewport control                   | ❌     | In-game debug console control | ❌     |

**** Miscellany

| Feature                                                            | Status |
|--------------------------------------------------------------------+--------|
| README-type documentation                                          | ✅     |
| White paper                                                        | ❌     |
| Reference Manual (Info, HTML, PostScript, PDF)                     | ❌     |
| API auto-generated code documentation (Man, HTML, PostScript, PDF) | ❌     |

** Architecture

#+CAPTION: Engine architecture diagram
[[assets/engine-arch-diagram.png]]

** Renderer

(...)

*** Architecture

#+CAPTION: Renderer architecture diagram
[[assets/renderer-arch-diagram.png]]

(...)

*** Lifecycle

#+begin_src mermaid
flowchart TB
  A[Initialization] --> B[Prepare frame]
  B --> C[Set state on GPU]
  C --> D[Present to screen]
  D --> E{Still running?}
  E --> |Yes| B
  E --> |No| F[Shutdown]
#+end_src

(...)

*** Phases

- *Phase 0:*
  - Graphics API instantiation
  - Clear screen to solid color
- *Phase 1:*
  - Static meshes
  - Textures
  - Materials
  - Phong reflection model (basic lighting)
- *Phase 2:*
  - Render targets/textures
  - Terrain
  - Skybox
  - Water
- *Phase 3:*
  - Post FX
  - Pipeline (configurable)
- *Phase 4:*
  - Physically Based Rendering (PBR) (advanced lighting)

*** Graphics pipeline

#+begin_src mermaid
flowchart TB
  A[Vertex & Index Buffers] --> |Input Assembler| B[Vertex Shader]
  B --> C[Tessellation]
  C --> D[Geometry Shader]
  D --> |Rasterization| E[Fragment Shader]
  E --> |Color Blending| F[Framebuffer]
#+end_src

(...)

**** Shader modules

#+begin_src mermaid
flowchart TB
  A[SPIR-V]
  B[GLSL] --> A
  C[HLSL] --> A
#+end_src

(...)

**** Vertex shader

#+CAPTION: Renderer vertex shader coordinates transformations
[[assets/renderer-vertex-shader-coordinates.png]]

(...)

**** Fragment shader

(...)

* Install a release

(...)

** Archive (~.tar.gz~ || ~.zip~)

(...)

** AppImage

(...)

** Flatpak

(...)

** Snap

(...)

* Build from source

(...)

** Get the code

(...)

#+begin_src sh
$  git clone --recurse-submodules https://github.com/iwas-coder/wge
#+end_src
(...)
#+begin_src sh
$  git clone https://github.com/iwas-coder/wge && cd wge
$  git submodule init
$  git submodule update
#+end_src

** Build

WGE ships with a ready-to-go ~Makefile~, so *GNU Make* is needed in order to build the engine. It is as simple as doing:
#+begin_src sh
$  make
#+end_src
By default, it targets the *Linux platform* (e.g. /GNU/Linux/). In order to build the project for Windows, it will be needed the *MinGW-w64* compiler suite in order to cross-compile it. With all that setup, it can be specified by doing:
#+begin_src sh
$  make TARGET=windows
#+end_src

* Usage

(...)
